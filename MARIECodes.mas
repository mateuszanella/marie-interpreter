//	SIMPLE SUM TEST

INPUT
STORE X
INPUT
ADD X
OUTPUT
HALT

X, DEC 0

//	Code memory
//
//	{"0x5000", "0x2006", "0x5000", "0x3006", "0x6000", "0x7000", "0x0000"}

//	SKIPCOND TEST

INPUT
SKIPCOND 400
JUMP DiferenteDeZero
JUMP IgualAZero

IgualAZero, 		OUTPUT
					HALT
            
DiferenteDeZero,	LOAD One
					OUTPUT
                    HALT

One, DEC 1



//	Code memory
//
//	{"0x5000", "0x8400", "0x9006", "0x9004", "0x6000",
//	 "0x7000", "0x1009", "0x6000", "0x7000", "0x0001"}


//  MULTIPLICATION TEST


Clear
Store result
Input
Store X
Input
Store Y

/ check if Y is negative, if -ve negate Y and set negative flag
Load Y
Skipcond 000
Jump nonneg

Subt Y
Subt Y
Store Y
Clear
Add one
Store negflag
Clear
Jump loop

nonneg,  Clear
         Store negflag
         / check if Y is zero, if it is, then we jump to halt
         Load Y
         Skipcond 400
         Jump loop / false
         Jump halt / true

/ Loop for performing iterative addition
loop,    Load result
         Add X
         Store result

         Load Y
         Subt one
         Store Y
	
         Skipcond 400 / have we completed the multiplication?
         Jump loop / no; repeat loop
         / yes, so exit the loop

/ check for negative flag, if it is set, negate the result
Load negflag
Skipcond 800
Jump halt

/ negate result
Load result
Subt result
Subt result
Store result
/ run the next three instructions, which halts the program

/ Output result to user then halt program
halt,    Load result
         Output	
         Halt

X, DEC 0
Y, DEC 0
one, DEC 1
negflag, DEC 0
result, DEC 0


// Code memory
//
{
                            "0xA000", "0x202D", "0x5000", "0x2029", "0x5000", "0x202A", "0x102A", "0x8000", "0x9011", "0x402A",
                            "0x402A", "0x202A", "0xA000", "0x302B", "0x202C", "0xA000", "0x9017", "0xA000", "0x202C", "0x102A",
                            "0x8400", "0x9017", "0x9026", "0x102D", "0x3029", "0x202D", "0x102A", "0x402B", "0x202A", "0x8400",
                            "0x9017", "0x102C", "0x8800", "0x9026", "0x102D", "0x402D", "0x402D", "0x202D", "0x102D", "0x6000",
                            "0x7000", "0x0000", "0x0000", "0x0001", "0x0000", "0x0000"
                            };


// STORE TEST


// {"0x5000", "0x2006", "0xA000", "0x1006", "0x6000", "0x7000", "0x0000"};